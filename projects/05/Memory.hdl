// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux(in=load, sel=address[14], a=ram, b=screen);
    RAM16K(in=in, load=ram, address=address[0..13], out=ramOut);
    
    DMux(in=screen, sel=address[12], a=screen1, b=screen2);

    RAM4K(in=in, load=screen1, address=address[0..11], out=screen1Out);
    RAM4K(in=in, load=screen2, address=address[0..11], out=screen2Out);    
    Mux16(a=screen1Out, b=screen2Out, sel=address[12], out=screenOut);

    Mux16(a=ramOut, b=screenOut, sel=address[14], out=out);

    // And(a=address[14], b=address[13], out=addressAnd);
    // Or8Way(in=address[5..12], out=addressOr1);
    // Or8Way(in[0..4]=address[0..4], in[5..7]=false, out=addressOr2);
    // Or(a=addressOr1, b=addressOr2, out=addressOr);
    // Not(in=addressOr, out=notAddressOr);

    // And(a=addressAnd, b=notAddressOr, out=keyboard);
    // Keyboard(out=key);
    // Register(in=key, load=keyboard, out=Kout);
}

    // DMux4Way(in=load, sel=address[0..1], a=ram0, b=ram1, c=ram2, d=ram3);
    // RAM4K(in=in, load=ram0, address=address[2..13], out=out0);
    // RAM4K(in=in, load=ram1, address=address[2..13], out=out1);
    // RAM4K(in=in, load=ram2, address=address[2..13], out=out2);
    // RAM4K(in=in, load=ram3, address=address[2..13], out=out3);
    // Mux4Way16(a=out0, b=out1, c=out2, d=out3, sel=address[0..1], out=out);